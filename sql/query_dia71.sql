--ROWS O RANGE BETWEEN ## AND ##
EXPLAIN (ANALYZE, BUFFERS, TIMING OFF)
SELECT e.nombre,e.nota,c.nombre_curso,
SUM(e.nota) OVER(PARTITION BY e.curso_id ORDER BY e.nota ASC
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS suma_acumulada,
AVG(e.nota) OVER(ORDER BY e.nota DESC
RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS promedio_global,
AVG(e.nota) OVER (ORDER BY e.nota DESC
ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS promedio_movil_3,
AVG(e.nota) OVER (PARTITION BY curso_id ORDER BY nota DESC
ROWS  BETWEEN 2 PRECEDING AND CURRENT ROW) AS promedio_movil_curso_3,
MAX(e.nota) OVER (ORDER BY e.nota ASC
RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS maximo_global,
MAX (e.nota) OVER (ORDER BY e.nota ASC
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS maximo__until_now

FROM estudiantes e
LEFT JOIN cursos c ON e.curso_id = c.id
ORDER BY c.nombre_curso;

--ROWS O RANGE BETWEEN ## AND ##
CREATE INDEX IF NOT EXISTS idx_estudiantes_curso_nota
ON estudiantes (curso_id, nota DESC);
EXPLAIN (ANALYZE, BUFFERS, TIMING OFF)
SELECT e.nombre,e.nota,c.nombre_curso,
SUM(e.nota) OVER(PARTITION BY e.curso_id ORDER BY e.nota ASC
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS suma_acumulada,
AVG(e.nota) OVER(ORDER BY e.nota DESC
RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS promedio_global,
AVG(e.nota) OVER (ORDER BY e.nota DESC
ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS promedio_movil_3,
AVG(e.nota) OVER (PARTITION BY curso_id ORDER BY nota DESC
ROWS  BETWEEN 2 PRECEDING AND CURRENT ROW) AS promedio_movil_curso_3,
MAX(e.nota) OVER (ORDER BY e.nota ASC
RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS maximo_global,
MAX (e.nota) OVER (ORDER BY e.nota ASC
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS maximo__until_now

FROM estudiantes e
LEFT JOIN cursos c ON e.curso_id = c.id
ORDER BY c.nombre_curso;